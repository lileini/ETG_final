//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : EasyToTravel
//  @ File Name : TripPageActivity.java
//  @ Date : 2015/10/12
//  @ Author : 
//
//
/**
 * @author 张少威
 * */

package com.lxl.travel.activity;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.http.RequestParams;
import com.lxl.travel.ETGApplication;
import com.lxl.travel.biz.RequestDataBiz;
import com.lxl.travel.biz.RequestGPSBiz;
import com.lxl.travel.biz.RequestWeatherFromBdiBiz;
import com.lxl.travel.entity.CurrentWeather;
import com.lxl.travel.entity.FurtherWeather;
import com.lxl.travel.entity.WeatherEntity;
import com.lxl.travel.utils.Const;
import com.lxl.travel.utils.JsonParser;
import com.lxl.trivel.R;
import com.thinkland.sdk.android.DataCallBack;
import com.thinkland.sdk.android.JuheData;

public class TripPageActivity extends Activity {
	public int mode = 0;//标识出行方式：1 飞机，2 火车，3 客车
	public TextView textView;
	public ImageView tripManner;
	public Button search;
	public AutoCompleteTextView fromCity, toCity;
	private ListView listView;
	private ArrayList<String> citys = new ArrayList<String>();
	private ArrayList<String> trainCitys = new ArrayList<String>();
	private TextView searchCity_Bt;
	private TextView weatherToday;
	private View weatherImage1;
	private TextView updateTimeTv;
	private TextView weatherTomorrow;
	private View weatherImage2;
	private TextView weatherDayAfterTomorrow;
	private View weatherImage3;
	private TextView tomorrow_Tv;
	private TextView dayAfterTomorrow_Tv;
	private ProgressBar progressBar;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_trip);
		setView();
		// 获得机场城市列表
		loadCitys();

		loadTrainCitys();
		addListener();
		getActionBar().hide();
		// 得到主页面传来的Intent，并做处理
		setManner();
		// 先判断ETGApplication中是否已经存在天气实体，
		if (ETGApplication.weatherEntity != null) {
			// 有就直接设置数据
			setWeatherInfo(ETGApplication.weatherEntity);
		} else {
			// 没有就延迟查看，若还是为空则请求GPS获取位置，获取数据
			Timer timer = new Timer();
			timer.schedule(new TimerTask() {
				@Override
				public void run() {
					if (ETGApplication.weatherEntity != null) {
						// 有就直接设置数据
						setWeatherInfo(ETGApplication.weatherEntity);
					} else {
						new RequestGPSBiz(TripPageActivity.this).requestGPS();
					}
				}
			}, 2000);
		}
	}

	private void setManner() {
		Intent intent = getIntent();
		tripManner.setImageResource(R.drawable.trip_manner);
		if(intent.getStringExtra(Const.AIRPLANE)!=null && intent.getStringExtra(Const.AIRPLANE).equals(Const.AIRPLANE)){
			//tripManner.setText(Const.AIRPLANE);
			tripManner.setImageResource(R.drawable.planeticket);
			mode = 1;
			displayAirport();
		} 
		if(intent.getStringExtra(Const.TRAIN)!=null && intent.getStringExtra(Const.TRAIN).equals(Const.TRAIN)){
			//tripManner.setText(Const.TRAIN);
			tripManner.setImageResource(R.drawable.trainticket);
			mode = 2;
			displayStation();
		}
		if(intent.getStringExtra(Const.BUS)!=null && intent.getStringExtra(Const.BUS).equals(Const.BUS)){
			//tripManner.setText(Const.BUS);
			tripManner.setImageResource(R.drawable.busticket);
			mode = 3;
		}
	}

	private void setView() {
		tripManner = (ImageView) findViewById(R.id.tripMannersBtn);
		textView = (TextView) findViewById(R.id.timeTv);
		fromCity = (AutoCompleteTextView) findViewById(R.id.fromCityTv);
		toCity = (AutoCompleteTextView) findViewById(R.id.toCityTv);
		search = (Button) findViewById(R.id.searchBtn);
		listView = (ListView) findViewById(R.id.mannerlistView1);
		searchCity_Bt = (TextView) findViewById(R.id.searchCity_Bt_trip);
		weatherToday = (TextView) findViewById(R.id.weatherDay1_Tv_trip);
		weatherTomorrow = (TextView) findViewById(R.id.weatherDay2_Tv_trip);
		weatherDayAfterTomorrow = (TextView) findViewById(R.id.weatherDay3_Tv_trip);
		tomorrow_Tv = (TextView) findViewById(R.id.Day2_Tv_trip);
		dayAfterTomorrow_Tv = (TextView) findViewById(R.id.Day3_Tv_trip);
		updateTimeTv = (TextView) findViewById(R.id.updateTime_TV_trip);
		weatherImage1 = (ImageView) findViewById(R.id.imageView1_trip);
		weatherImage2 = (ImageView) findViewById(R.id.ImageView02_trip);
		weatherImage3 = (ImageView) findViewById(R.id.ImageView03_trip);
		// today_Tv = (TextView) findViewById(R.id.Day1_Tv);
		// progressBar = (ProgressBar) findViewById(R.id.progressBar1_nearby);
		setTextView();
	}

	private void setTextView() {
		final Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(System.currentTimeMillis());
		textView.setText(calendar.get(Calendar.YEAR)+"-"+(calendar.get(Calendar.MONTH)+1)+"-"+calendar.get(Calendar.DAY_OF_MONTH));
		textView.setOnTouchListener(new OnTouchListener() {
			
			@Override
			public boolean onTouch(final View v, MotionEvent event) {
				DatePickerDialog dpDialog = new DatePickerDialog(TripPageActivity.this, AlertDialog.THEME_HOLO_LIGHT, new OnDateSetListener() {
					
					@Override
					public void onDateSet(DatePicker view, int year, int monthOfYear,
							int dayOfMonth) {
						String date = year+"-"+(monthOfYear+1)+"-"+(dayOfMonth);
						((TextView)v).setText(date);
					}
				}, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));
				dpDialog.show();
				return false;
			}
		});
	}

	// public void setListView() {}

	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.tripMannersBtn:
			selectTripManner(tripManner);
			break;
		case R.id.searchBtn:
			if ((fromCity.getText().toString()).equals("")) {
				Toast.makeText(this, "亲，请填写出发地", Toast.LENGTH_SHORT).show();
				return;
			}
			if (toCity.getText().toString().equals("")){
				Toast.makeText(this, "亲，请填写目的地", Toast.LENGTH_SHORT).show();
				return;
			}
			if (mode == 0){
				Toast.makeText(this, "亲，请选择出行方式", Toast.LENGTH_SHORT).show();
			}
			search();
			break;
		}
	}

	// 查询信息
	private void search() {
		RequestDataBiz biz = new RequestDataBiz(this, listView, fromCity,
				toCity, textView);
		if(mode == 1){
			biz.loadData();
		}else if(mode ==2){
			biz.loadTrainData();
		}else if(mode ==3){
			biz.loadBusData();
		}
	}

	// 选择出行方式
	private void selectTripManner(final ImageView tripManner2) {
		final String manner[] = {Const.AIRPLANE,Const.TRAIN,Const.BUS};
		final int manners[] = {R.drawable.planeticket,R.drawable.trainticket,R.drawable.busticket};
		new AlertDialog.Builder(this).setIcon(android.R.drawable.btn_star).setTitle("请选择")
		.setSingleChoiceItems(manner, -1, new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				tripManner2.setImageResource(manners[which]);
				mode = which + 1;
				dialog.cancel();
				if(mode == 1){
					displayAirport();
				}else if(mode == 2){
					displayStation();
					//Log.i("info", "adapter_trainCitys:"+trainCitys);
				}
				fromCity.setText("");
				toCity.setText("");
			}
		}).create().show();
	}

	// public void updateWeather() {}
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		return super.onCreateOptionsMenu(menu);
	}

	private void loadCitys() {
		JuheData.executeWithAPI(this, 20, "http://apis.juhe.cn/plan/city",
				JuheData.GET, null, new DataCallBack() {
					@Override
					public void onSuccess(int statusCode, String responseString) {

						try {
							JSONObject obj = new JSONObject(responseString);
							ArrayList<String> list = JsonParser.parseCity(obj
									.getJSONArray("result"));
							for (String s : list) {
								citys.add(s);
							}
						} catch (JSONException e) {
							e.printStackTrace();
						}
					}

					@Override
					public void onFinish() {

					}

					@Override
					public void onFailure(int statusCode,
							String responseString, Throwable throwable) {
						Log.i("info", "string:" + responseString);
						Log.i("info", "throwable:" + throwable);
					}
				});
	}

	private void loadTrainCitys() {
		JuheData.executeWithAPI(this, 22,
				"http://apis.juhe.cn/train/station.list.php", JuheData.GET,
				null, new DataCallBack() {
					@Override
					public void onSuccess(int statusCode, String responseString) {
						try {
							JSONObject obj = new JSONObject(responseString);
							ArrayList<String> list = JsonParser
									.parseTrainCitys(obj.getJSONArray("result"));
							for (String s : list) {
								trainCitys.add(s);
							}
						} catch (JSONException e) {
							e.printStackTrace();
						}
					}

					@Override
					public void onFinish() {

					}

					@Override
					public void onFailure(int statusCode,
							String responseString, Throwable throwable) {
						Log.i("info", "string:" + responseString);
						Log.i("info", "throwable:" + throwable);
					}
				});
	}

	// 设置下拉列表
	private void displayAirport() {
		fromCity.setAdapter(new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, citys));
		fromCity.setThreshold(1);
		toCity.setAdapter(new ArrayAdapter<String>(TripPageActivity.this,
				android.R.layout.simple_list_item_1, citys));
		toCity.setThreshold(1);
	}

	// 设置下拉列表
	private void displayStation() {
		fromCity.setAdapter(new ArrayAdapter<String>(TripPageActivity.this,
				android.R.layout.simple_list_item_1, trainCitys));
		fromCity.setThreshold(1);
		toCity.setAdapter(new ArrayAdapter<String>(TripPageActivity.this,
				android.R.layout.simple_list_item_1, trainCitys));
		toCity.setThreshold(1);
	}

	/** 设置标题栏天气状况的显示 */
	public void setWeatherInfo(WeatherEntity weatherEntity) {
		BitmapUtils bitmapUtils = new BitmapUtils(TripPageActivity.this);
		// 更改当前城市
		// searchCity_Bt.setText(weatherEntity.getCity());
		// 设置今天天气信息
		CurrentWeather currentWeather = weatherEntity.getCurrentWeather();
		String infoToday = "温度 : " + currentWeather.getTemp() + "℃\n" + "湿度 : "
				+ currentWeather.getHumidity();
		weatherToday.setText(infoToday);
		bitmapUtils.display(weatherImage1, currentWeather.getWindStrength());
		// 设置更新时间
		updateTimeTv.setText(currentWeather.getUpdateTime() + "更新");
		// 设置明天天气信息
		FurtherWeather tomorrowWeather = weatherEntity.getTomorrowWeather();
		String infoTomorrowWeather = "温度 : " + tomorrowWeather.getTemp()
				+ "℃\n" + tomorrowWeather.getWeather();
		weatherTomorrow.setText(infoTomorrowWeather);
		bitmapUtils.display(weatherImage2, tomorrowWeather.getWind());
		// 设置后天天气信息
		FurtherWeather dayAfterTomorrow = weatherEntity
				.getDayAftertomorrowWeather();
		String infoDayAfterTomorrow = "温度 : " + dayAfterTomorrow.getTemp()
				+ "℃\n" + dayAfterTomorrow.getWeather();
		weatherDayAfterTomorrow.setText(infoDayAfterTomorrow);
		bitmapUtils.display(weatherImage3, dayAfterTomorrow.getWind());

		try {
			SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
			// 设置明天日期
			String Tdate = dateFormat1.format(dateFormat2.parse(tomorrowWeather
					.getDate()));
			tomorrow_Tv.setText(Tdate);
			// 设置后天日期
			String AfterTdate = dateFormat1.format(dateFormat2
					.parse(dayAfterTomorrow.getDate()));
			dayAfterTomorrow_Tv.setText(AfterTdate);
		} catch (ParseException e) {
			Toast.makeText(this, "更新日期失败", Toast.LENGTH_LONG).show();
			e.printStackTrace();
		}

	}

	private void addListener() {

		searchCity_Bt.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// 隐藏城市显示view
				searchCity_Bt.setVisibility(View.INVISIBLE);
				// 显示进度条
				// progressBar.setVisibility(View.VISIBLE);
				if (ETGApplication.location != null) {
					requestWeatherData(ETGApplication.location.getLongitude(),
							ETGApplication.location.getLatitude());
				} else {
					Toast.makeText(TripPageActivity.this, "定位中，请稍后",
							Toast.LENGTH_SHORT).show();
					ETGApplication.location = new RequestGPSBiz(
							TripPageActivity.this).requestGPS();
				}
			}
		});
	}

	/**
	 * 请求天气数据
	 * 
	 * @param lon
	 *            lat 经纬度
	 * */
	public void requestWeatherData(double lon, double lat) {

		searchCity_Bt.setVisibility(View.INVISIBLE);
		// 设置请求参数
		RequestParams params = setParams(lon, lat);
		// 通过广播接收返回的数据
		RequestWeatherFromBdiBiz.getWeatherData(TripPageActivity.this, 39,
				"http://apis.baidu.com/showapi_open_bus/weather_showapi/point",
				params);

	}

	/** 设置向服务器端获取天气信息的请求参数 */
	private RequestParams setParams(double lon, double lat) {
		RequestParams params = new RequestParams();
		params.addHeader("apikey", "" + "6a64de48c734680156fbd141f95425ac");
		params.addQueryStringParameter("lng", "" + lon);
		params.addQueryStringParameter("lat", "" + lat);
		params.addQueryStringParameter("from", "5");
		params.addQueryStringParameter("needMoreDay", "0");
		params.addQueryStringParameter("needIndex", "0");
		return params;

	}

	class LocationChangedReceiver extends BroadcastReceiver {

		@Override
		public void onReceive(Context context, Intent intent) {
			if (Const.ACTION_LOCATION_CHANGED.equals(intent.getAction())) {
				requestWeatherData(ETGApplication.location.getLongitude(),
						ETGApplication.location.getLatitude());
			}
			if (Const.RECEIVE_WEATHER_DATA.equals(intent.getAction())) {
				if (Const.WEATHER_DATA_REQUEST_SUCCESSED == intent.getIntExtra(
						Const.WEATHER_DATA_STATUSCODE, -1)) {
					// 解析获取到的数据
					String respString = intent
							.getStringExtra(Const.WEATHER_DATA_RESPONSESTRING);
					try {
						WeatherEntity weatherEntity = RequestWeatherFromBdiBiz
								.parseWeatherData(respString);
						// 将当前查询到的天气信息对象,设为app全局
						ETGApplication.weatherEntity = weatherEntity;
						try {
							setWeatherInfo(weatherEntity);
						} catch (Exception e) {
							// Toast.makeText(HomePageActivity.this, "更新天气信息失败",
							// Toast.LENGTH_SHORT);
						}
					} catch (JSONException e) {
						// Toast.makeText(HomePageActivity.this, "加载数据失败",
						// Toast.LENGTH_LONG).show();
						e.printStackTrace();
					}
					// Toast.makeText(HomePageActivity.this, "加载数据成功",
					// Toast.LENGTH_LONG).show();
					// 设置显示进度条
					// progressBar.setVisibility(View.GONE);
					searchCity_Bt.setVisibility(View.VISIBLE);
				} else {// 获取数据失败
					String throwable = intent
							.getStringExtra(Const.WEATHER_DATA_THROWABLE);
					Log.i("info", "throwable1 :" + throwable);
					// Toast.makeText(HomePageActivity.this,
					// "连接服务器失败: "+throwable, Toast.LENGTH_LONG).show();
				}
			}
		}

	}
}
