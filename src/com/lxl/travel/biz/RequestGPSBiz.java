//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : EasyToTravel
//  @ File Name : RequestGPSBiz.java
//  @ Date : 2015/10/12
//  @ Author : 
//
//

package com.lxl.travel.biz;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.provider.Settings;
import android.widget.Toast;

import com.lxl.travel.ETGApplication;
import com.lxl.travel.utils.Const;
import com.lxl.travel.utils.LogUtil;

public class RequestGPSBiz {

	Activity activity;
	/** ��һ������gps */
	private static boolean isFirstRequest = true,firstRequest = true;
	/** �Ƿ���ʹ������/GPS���� */
	private static boolean getByNetWork=false,getByGPS = false;
	private Location oldLocation;

	public RequestGPSBiz(Activity activity) {
		this.activity = activity;
	}

	/** �ж�GPS�Ƿ���� */
	private boolean gpsIsEnabled() {
		LocationManager alm = (LocationManager) activity
				.getSystemService(Context.LOCATION_SERVICE);
		if (alm.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER)) {
			getByGPS = true;
			return true;
		}
		getByGPS = false;
		return false;
	}

	/** �ж����綨λ�Ƿ���� */
	private boolean netWorkIsEnabled() {
		LocationManager alm = (LocationManager) activity
				.getSystemService(Context.LOCATION_SERVICE);
		if (alm.isProviderEnabled(android.location.LocationManager.NETWORK_PROVIDER)) {
			getByNetWork = true;
			return true;
		}
		getByNetWork = false;
		return false;
	}

	public Location requestGPS() {
		activity.runOnUiThread(new Runnable() {

			@Override
			public void run() {
				LogUtil.i("requestGPS", "requestGPS");
				oldLocation = getLocation();
			}
		});
		return oldLocation;
	}

	private Location getLocation() {
		if (!gpsIsEnabled()) {
			LogUtil.i("requestGPS", "getLocation: gpsIsEnabled is false!");
			if (isFirstRequest) {
				isFirstRequest = false;
				getByNetWork = true;
				activity.runOnUiThread(new Runnable() {

					@Override
					public void run() {
						// Toast.makeText(activity, "GPSδ����,�뿪��GPS",
						// Toast.LENGTH_SHORT).show();
						AlertDialog.Builder builder = new AlertDialog.Builder(
								activity);
						builder.setMessage("GPS未开启,请开启GPS");
						builder.setTitle("提示");
						builder.setPositiveButton("确定", new OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								Intent intent = new Intent(
										Settings.ACTION_LOCATION_SOURCE_SETTINGS);
								activity.startActivityForResult(intent, 101);
								getByNetWork = false;
								getByGPS = true;
								isFirstRequest = false;
							}
						});
						builder.setNegativeButton("取消", new OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								Toast.makeText(activity, "通过网络获取位置",
										Toast.LENGTH_SHORT).show();
								getByNetWork = true;
								isFirstRequest = false;
								oldLocation = getLocation();
							}
						});
						builder.create().show();
					}
				});
				return null;
			}
			LogUtil.i("requestGPS", "getLocation: not's first!������");
			getByNetWork = true;
		}
		//�ж�����λ���Ƿ�
		if (!netWorkIsEnabled()) {
			getByNetWork = false;
			LogUtil.i("requestGPS", "netWorkIsEnabled: false");
		}
		if (!getByGPS && !getByNetWork){
			activity.runOnUiThread(new Runnable() {
				
				@Override
				public void run() {
					Toast.makeText(activity, "无法获得您当前的位置信息\\n请开启GPS或者网络位置信息", Toast.LENGTH_LONG).show();
				}
			});
			return null;
		}
		
		// ��ȡλ�ù������
		final LocationManager locationManager;
		String serviceName = Context.LOCATION_SERVICE;
		locationManager = (LocationManager) activity
				.getSystemService(serviceName);
		// ���ҵ�������Ϣ
		// ���ü��������Զ����µ���Сʱ��Ϊ���N��(1��Ϊ1*1000������д��ҪΪ�˷���)����Сλ�Ʊ仯����N��
		
		Criteria criteria = new Criteria();
		criteria.setAccuracy(Criteria.ACCURACY_FINE); // �߾���
		criteria.setAltitudeRequired(false);
		criteria.setBearingRequired(false);
		criteria.setCostAllowed(true);
		criteria.setPowerRequirement(Criteria.POWER_LOW); // �͹���

		String provider = locationManager.getBestProvider(criteria, true); // ��ȡGPS��Ϣ
		Location location = locationManager.getLastKnownLocation(provider); // ͨ��GPS��ȡλ��

		//����λ�ÿ�������gps�ر�
		if (getByNetWork && !getByGPS) {
			locationManager.requestLocationUpdates(
					LocationManager.NETWORK_PROVIDER, 1800000, 2000,
					getListener());
			LogUtil.i("requestGPS", "getByNetWork: location=" + location);
			oldLocation = location;
			if (firstRequest){
				firstRequest = false;
				ETGApplication.location = location;
				Intent intent = new Intent(Const.ACTION_LOCATION_CHANGED);
				ETGApplication.instance.sendBroadcast(intent);
			}
			return location;
			//gps ����
		} else if (gpsIsEnabled()) {

			locationManager.requestLocationUpdates(
					LocationManager.GPS_PROVIDER, 1800000, 1000, getListener());
			LogUtil.i("requestGPS", "getByGps: location=" + location);
			if (firstRequest) {
				firstRequest = false;
				oldLocation = location;
				ETGApplication.location = location;
				Intent intent = new Intent(Const.ACTION_LOCATION_CHANGED);
				ETGApplication.instance.sendBroadcast(intent);
				
			}
			return location;
		}
		LogUtil.i("requestGPS", "NO provider: location=" + location);
		return null;
	}

	private LocationListener getListener() {

		LocationListener locationListener = new LocationListener() {

			@Override
			public void onStatusChanged(String provider, int status,
					Bundle extras) {
				// TODO Auto-generated method stub
				isFirstRequest = true;
				getByNetWork = false;
				getByGPS = false;
				getByNetWork = false;
			}

			@Override
			public void onProviderEnabled(String provider) {
				// TODO Auto-generated method stub
				isFirstRequest = true;
				getByNetWork = false;
				getByGPS = false;
				getByNetWork = false;
			}

			@Override
			public void onProviderDisabled(String provider) {
				// TODO Auto-generated method stub
				isFirstRequest = true;
				getByNetWork = false;
				getByGPS = false;
				getByNetWork = false;

			}

			@Override
			public void onLocationChanged(Location location) {
				//�ȱ��浽ETGApplication
				ETGApplication.location = location;
				LogUtil.i("requestGPS", "onLocationChanged: location="
						+ location);
				if (null == oldLocation) {
					LogUtil.i("requestGPS", "oldLocation = null; newLocation="
							+ location);
					oldLocation = location;
					Intent intent = new Intent(Const.ACTION_LOCATION_CHANGED);
					ETGApplication.instance.sendBroadcast(intent);
				} else {
					// ��γ�ȱ仯����0.02�ŷ��㲥����
					if ((location.getLatitude() - oldLocation.getLatitude()) > 0.02
							|| (location.getLatitude() - oldLocation
									.getLatitude()) < -0.02
							|| (location.getLongitude() - oldLocation
									.getLongitude()) > 0.02
							|| (location.getLongitude()
									- oldLocation.getLongitude() < -0.02)) {
						LogUtil.i("location", "lon:" + location.getLongitude()
								+ "lat:" + location.getLatitude());

						Intent intent = new Intent(
								Const.ACTION_LOCATION_CHANGED);
						ETGApplication.instance.sendBroadcast(intent);
					}
				}
			}
		};
		return locationListener;
	}
}
