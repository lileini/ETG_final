//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : EasyToTravel
//  @ File Name : PersonalFragment.java
//  @ Date : 2015/10/12
//  @ Author : 
//
//



package com.lxl.travel.fragment;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.ContentValues;
import android.content.DialogInterface;
//import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;

import com.baoyz.swipemenulistview.SwipeMenuListView;
import com.lxl.travel.ETGApplication;
import com.lxl.travel.activity.LoginActivity;
import com.lxl.travel.activity.NotePadDBHelper;
import com.lxl.travel.adapter.GeneralInfoAdapter;
import com.lxl.travel.base.BaseFragment;
import com.lxl.travel.utils.CameraForImageUtil;
import com.lxl.travel.utils.ImageCompress;
import com.lxl.travel.utils.ImageCompress.CompressOptions;
import com.lxl.trivel.R;
import com.tarena.utils.ImageCircleView;

/**
 * 本类中的数据库相关操作应该异步进行
 * */
@SuppressLint("SimpleDateFormat")
public class PersonalFragment extends BaseFragment {

	private TextView login_Tv;
	private View view;
	private TextView baseInfo_Tv;
	private TextView addGeneralInfo_Tv;
	private SwipeMenuListView general_lv;
	private EditText address_Et;
	private EditText name_Et;
	private Button submit_btn;
	private Button cancel_btn;
	private TextView registTime_Tv;
	private TextView lastLoginTime_Tv;
	private TextView gender_Tv;
	private TextView username_Tv;
	private TextView nickName_Tv;
//	private TextView personal_generalinfo_Tv;
	private NotePadDBHelper dbHelper;
	private DisplayMetrics displayMetrics;
	private ImageCircleView userImg_Iv;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		dbHelper = NotePadDBHelper.newInstance(getActivity());
		initDisplayMetrics();
	}


	private int dp2px(int dp) {
		return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,
				getResources().getDisplayMetrics());
	}

	private void initDisplayMetrics(){
		//获取屏幕管理器
		WindowManager manager = getActivity().getWindowManager();
		//设置弹窗的宽度
		displayMetrics = new DisplayMetrics();
		manager.getDefaultDisplay().getMetrics(displayMetrics);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		getActivity().getActionBar().hide();
		view = inflater.inflate(R.layout.fragment_personal, null);
		setViews();
		//setListView();
		setListener();
		return view;
	}

	/**初始化控件*/
	private void setViews() {
		userImg_Iv = (ImageCircleView)view.findViewById(R.id.userImg_Iv_c);
		login_Tv = (TextView) view.findViewById(R.id.login_Tv);
		baseInfo_Tv = (TextView) view.findViewById(R.id.personal_info_Tv);
		addGeneralInfo_Tv = (TextView) view.findViewById(R.id.personal_addgeneralinfo_Tv);
		general_lv = (SwipeMenuListView) view.findViewById(R.id.generalinfo_Lv);
//		personal_generalinfo_Tv = (TextView) view.findViewById(R.id.personal_generalinfo_Tv);
	}

	/**设置侧滑listview的显示*/
	/*private void setListView() {
		// step 1. create a MenuCreator
		SwipeMenuCreator creator = new SwipeMenuCreator() {

			@Override
			public void create(SwipeMenu menu) {
				// create "open" item
				SwipeMenuItem openItem = new SwipeMenuItem(
						PersonalFragment.this.getActivity());
				// set item background
				openItem.setBackground(R.drawable.travel_background_color_selector);
				// set item width
				openItem.setWidth(dp2px(90));
				// set item title
				openItem.setTitle("�༭");
				// set item title fontsize
				openItem.setTitleSize(18);
				// set item title font color
				openItem.setTitleColor(Color.WHITE);
				// add to menu
				menu.addMenuItem(openItem);

				// create "delete" item
				SwipeMenuItem deleteItem = new SwipeMenuItem(
						PersonalFragment.this.getActivity());
				// set item background
				deleteItem.setBackground(R.drawable.trip_background_color_selector);
				// set item width
				deleteItem.setWidth(dp2px(90));
				// set a icon
				//deleteItem.setIcon(R.drawable.ic_delete);
				// set item title
				deleteItem.setTitle("ɾ��");
				// set item title fontsize
				deleteItem.setTitleSize(18);
				// set item title font color
				deleteItem.setTitleColor(Color.WHITE);
				// add to menu
				menu.addMenuItem(deleteItem);
			}
		};
		// set creator
		general_lv.setMenuCreator(creator);
		serSlideItemListener();
	}*/


	/**设置item侧滑点击监听*/
	/*private void serSlideItemListener() {
		general_lv.setOnMenuItemClickListener(new OnMenuItemClickListener() {

			@Override
			public void onMenuItemClick(int position, SwipeMenu menu, int index) {
				switch(index){
				case 0://编辑监听
					int selectedId = Integer.valueOf(generalInfos.get(position).get(idKey));
					setPopupWindow(UPDATE_TO_DB,selectedId);
					name_Et.setText(generalInfos.get(position).get(nameKey));
					address_Et.setText(generalInfos.get(position).get(addressKey));
					break;
				case 1://删除监听
					String whereClause = "_id="+generalInfos.get(position).get(idKey);
					deleteinfo(whereClause);
					generalInfos.remove(position);
					adapter.notifyDataSetChanged();
					break;
				}
			}
		});
	}*/

	@Override
	public void onResume() {
		if(ETGApplication.userEntity != null){
			login_Tv.setText(ETGApplication.userEntity.getNickname());
			//获取本地存储的常用信息
			selectDataFromDB();
			//设头像
			File file = CameraForImageUtil
					.getOutputMediaFile(ETGApplication.userEntity.getUsername());
			if (file.exists()) {
				ImageCompress.CompressOptions options = new CompressOptions();
				options.uri = Uri.fromFile(file);
				options.maxHeight = 78;
				options.maxWidth = 78;

				ImageCompress imageCompress = new ImageCompress();
				Bitmap bitmap = imageCompress.compressFromUri(
						getActivity(), options);
				/*
				 * bitmap = BitmapUtil.loadBitmap(file.getAbsolutePath(), 48,
				 * 48);
				 */
				userImg_Iv.setImageBitmap(bitmap);
			}else {
				userImg_Iv.setImageResource(R.drawable.icon_account);
			}

		}
		super.onResume();
	}

	/**从数据库查询数据*/
	private void selectDataFromDB() {
		if(generalInfos == null){
			generalInfos = new ArrayList<Map<String,String>>();
		}else {
			//清空上次的数据
			generalInfos.removeAll(generalInfos);
		}
		//查询语句
		String sql = "select * from ETGgeneralInfo where _username="+ETGApplication.userEntity.getUsername();		
		Cursor c = dbHelper.query(sql, null);
		//将查询到的数据封装起来,在listview中显示
		while(c.moveToNext()){
			Map<String, String> map = new HashMap<String, String>();
			map.put(nameKey, c.getString(c.getColumnIndex("_name")));
			map.put(addressKey, c.getString(c.getColumnIndex("_address")));
			map.put(idKey, String.valueOf(c.getInt(c.getColumnIndex("_id"))));
			generalInfos.add(0,map);
		}
		c.close();
		showListView();
	}

	/**设置监听器*/
	private void setListener() {

		//设置点击登录监听
		login_Tv.setOnClickListener(new android.view.View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if(ETGApplication.userEntity != null){
					Toast.makeText(getActivity(), "���Ѿ���¼��", Toast.LENGTH_SHORT).show();
					return;
				}else{					
					Intent intent = new Intent(getActivity(),LoginActivity.class);
					getActivity().startActivity(intent);
				}
			}
		});

		//点击基本信息监听
		baseInfo_Tv.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if(ETGApplication.userEntity == null){
					Toast.makeText(PersonalFragment.this.getActivity(), "登录之后查看更多信息", Toast.LENGTH_SHORT).show();
				}else {
					displayBaseInfo();	
				}	
			}
		});
		//头像
		userImg_Iv.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if(ETGApplication.userEntity != null){
					Toast.makeText(getActivity(), "请右滑进入设置栏更换账号", Toast.LENGTH_SHORT).show();
					return;
				}else{					
					Intent intent = new Intent(getActivity(),LoginActivity.class);
					getActivity().startActivity(intent);
				}
			}
		} );
//		personal_generalinfo_Tv

		//点击查看常用信息
		/*personal_generalinfo_Tv.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if(ETGApplication.userEntity == null){
					Toast.makeText(PersonalFragment.this.getActivity(),
							"登录之后查看常用信息", Toast.LENGTH_SHORT).show();
				}else {
					setPopupWindow(INSERT_TO_DB, -1);	
				}
			}
		});*/
		//点击添加常用信息
		addGeneralInfo_Tv.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if(ETGApplication.userEntity == null){
					Toast.makeText(PersonalFragment.this.getActivity(),
							"登录之后添加更多信息", Toast.LENGTH_SHORT).show();
				}else {
					setPopupWindow(INSERT_TO_DB, -1);
				}
			}
		});

		//listview的item点击监听
		setItemOnClickListener();
	}

	String[] items = new String[] {"编辑", "删除"};
	/**设置listview的item点击监听*/
	private void setItemOnClickListener() {
		general_lv.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					final int position, long id) {

				AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
				builder.setSingleChoiceItems(items, -1, new android.content.DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						selectedItem = which;
						selectedPos = position;
					}
				});
				builder.setPositiveButton("确定", positiveButtonListener);
				builder.setNegativeButton("取消", negativeButtonListener);
				builder.setCancelable(true);
				builder.show();
			}
		});

	}

	/**选择的是编辑还是删除*/
	private int selectedItem;
	/**点击的item*/
	private int selectedPos;
	/**确定 监听*/
	private android.content.DialogInterface.OnClickListener positiveButtonListener = new android.content.DialogInterface.OnClickListener() {

		@Override
		public void onClick(DialogInterface dialog, int which) {
			switch (selectedItem) {
			case 0://����༭
				int selectedId = Integer.valueOf(generalInfos.get(selectedPos).get(idKey));
				setPopupWindow(UPDATE_TO_DB,selectedId);
				name_Et.setText(generalInfos.get(selectedPos).get(nameKey));
				address_Et.setText(generalInfos.get(selectedPos).get(addressKey));
				break;
			case 1://���ɾ��
				String whereClause = "_id="+generalInfos.get(selectedPos).get(idKey);
				deleteinfo(whereClause);
				generalInfos.remove(selectedPos);
				adapter.notifyDataSetChanged();
				break;

			}
		}
	};

	/**取消监听*/
	private android.content.DialogInterface.OnClickListener negativeButtonListener = new android.content.DialogInterface.OnClickListener() {

		@Override
		public void onClick(DialogInterface dialog, int which) {
			Toast.makeText(PersonalFragment.this.getActivity(), "取消"+which, Toast.LENGTH_LONG).show();
		}
	};


	/**弹窗显示基本信息*/
	@SuppressWarnings("deprecation")
	private void displayBaseInfo() {
		//弹窗,添加信息
		View baseInfoContentView = View.inflate(PersonalFragment.this.getActivity(), R.layout.item_personal_baseinfo_popupwindow, null);
		//设置弹窗窗口的大小和位置
		PopupWindow baseInfoWindow = new PopupWindow(baseInfoContentView, displayMetrics.widthPixels/4*3, displayMetrics.heightPixels/5);
		// 设置背景，这个是为了点击“返回Back”也能使其消失，并且并不会影响你的背景
		baseInfoWindow.setBackgroundDrawable(new BitmapDrawable());
		// 使其聚集 ，要想监听菜单里控件的事件就必须要调用此方法
		baseInfoWindow.setFocusable(true);
		baseInfoWindow.showAtLocation(view, Gravity.CENTER, 0, 0);
		initBaseInfoViews(baseInfoContentView);
		setBaseInfo(baseInfoContentView);
	}

	/**初始化基本信息的显示控件
	 * @param baseInfoContentView */
	private void initBaseInfoViews(View baseInfoContentView) {
		username_Tv = (TextView) baseInfoContentView.findViewById(R.id.baseinfo_username_Tv);
		nickName_Tv = (TextView) baseInfoContentView.findViewById(R.id.baseinfo_nickname_Tv);
		gender_Tv = (TextView) baseInfoContentView.findViewById(R.id.baseinfo_gender_Tv);
		lastLoginTime_Tv = (TextView) baseInfoContentView.findViewById(R.id.baseinfo_lastLoginTime_Tv);
		registTime_Tv = (TextView) baseInfoContentView.findViewById(R.id.baseinfo_registTime_Tv);
	}

	/**设置基本信息的显示
	 * @param baseInfoContentView */
	private void setBaseInfo(View baseInfoContentView) {
		if(ETGApplication.userEntity!=null){
			username_Tv.setText(ETGApplication.userEntity.getUsername());
			nickName_Tv.setText(ETGApplication.userEntity.getNickname());
			if("m".equals(ETGApplication.userEntity.getGender())){				
				gender_Tv.setText("男");
			}else if("f".equals(ETGApplication.userEntity.getGender())){				
				gender_Tv.setText("女");
			}
			//转换时间
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			String lastLoginTime = format.format(ETGApplication.userEntity.getLastLoginTime());
			lastLoginTime_Tv.setText(lastLoginTime);
			String registTime = format.format(ETGApplication.userEntity.getRegTime());
			registTime_Tv.setText(registTime);
		}
	}

	private PopupWindow window;
	private View contentView;
	private static final int INSERT_TO_DB = -1;
	private static final int UPDATE_TO_DB = -2;
	/**设置常用信息弹窗*/
	@SuppressWarnings("deprecation")
	private void setPopupWindow(int submitType, int selectedId) {
		//弹窗,添加信息
		contentView = View.inflate(PersonalFragment.this.getActivity(), R.layout.item_personal_addinfo_popupwindow, null);
		//获取屏幕管理器
		WindowManager manager = getActivity().getWindowManager();
		//设置弹窗的宽度
		DisplayMetrics displayMetrics = new DisplayMetrics();
		manager.getDefaultDisplay().getMetrics(displayMetrics);
		//设置弹窗窗口的大小和位置
		window = new PopupWindow(contentView, displayMetrics.widthPixels/4*3, displayMetrics.heightPixels/4);
		// 使其聚集 ，要想监听菜单里控件的事件就必须要调用此方法
		window.setFocusable(true);
		// 设置背景，这个是为了点击“返回Back”也能使其消失，并且并不会影响你的背景
		window.setBackgroundDrawable(new BitmapDrawable());
		//软键盘不会挡着popupwindow
		window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
//		window.showAtLocation(personal_generalinfo_Tv, Gravity.CENTER, 0, displayMetrics.heightPixels/7);
		//window.showAsDropDown(personal_generalinfo_Tv);
		initView();
		setWindowListener(submitType,selectedId);
	}

	/**初始化常用信息弹窗中的控件*/
	private void initView() {
		name_Et = (EditText)contentView.findViewById(R.id.name_Et);
		address_Et = (EditText)contentView.findViewById(R.id.address_ET);
		submit_btn = (Button) contentView.findViewById(R.id.check_Btn);
		cancel_btn = (Button) contentView.findViewById(R.id.cancel_Btn);
	}

	/**设置常用信息弹窗的点击监听*/
	private void setWindowListener(final int submitType, final int selectedId) {
		//添加数据到本地数据库SQLite
		submit_btn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				if(TextUtils.isEmpty(name_Et.getText().toString()) 
						|| TextUtils.isEmpty(address_Et.getText().toString())){
					Toast.makeText(PersonalFragment.this.getActivity(), "信息没有填完哦", Toast.LENGTH_SHORT).show();
				}else{
					//添加数据到本地数据库SQLite
					saveInfo(submitType, selectedId);
					window.dismiss();
				}

			}
		});

		//点击取消监听
		cancel_btn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				window.dismiss();
			}
		});

	}

	private List<Map<String, String>> generalInfos ;
	private String nameKey = "_name";
	private String addressKey = "_address";
	private String idKey = "_id";
	/**保存信息到本地
	 * @param submitType*/
	private void saveInfo(int submitType, int selectedId) {
		String nameInfo = name_Et.getText().toString();
		String addressInfo = address_Et.getText().toString();
		Map<String, String> map = new HashMap<String, String>();
		//添加信息到集合
		map.put(nameKey, nameInfo);
		map.put(addressKey, addressInfo);
		generalInfos.add(map);
		if(INSERT_TO_DB == submitType){			
			insertDataToDB();
		}else if(UPDATE_TO_DB == submitType){
			ContentValues updateValues = new ContentValues();
			updateValues.put(nameKey, nameInfo);
			updateValues.put(addressKey, addressInfo);
			String whereClause = "_id="+selectedId;
			updateInfo(updateValues,whereClause,null);
		}
		selectDataFromDB();
	}

	/**更新数据库的信息*/
	private void updateInfo( ContentValues values, String whereClause, String[] whereArgs) {
		dbHelper.update("ETGgeneralInfo", values, whereClause, whereArgs);
	}


	/**向数据库插入数据*/
	private void insertDataToDB() {
		ContentValues values = new ContentValues();
		values.put("_username", ETGApplication.userEntity.getUsername());
		values.put("_name", name_Et.getText().toString());
		values.put("_address", address_Et.getText().toString());
		dbHelper.insert("ETGgeneralInfo", values);
	}

	private GeneralInfoAdapter adapter;
	/**设置常用信息在listview上的显示*/
	private void showListView() {
		if(adapter == null){
			adapter = new GeneralInfoAdapter(this.getActivity());
			adapter.setGeneralInfos(generalInfos);
			general_lv.setAdapter(adapter);
		}else {
			adapter.notifyDataSetChanged();
		}
	}


	/**保存控件的状态*/
	@Override
	public void onDestroyView() {
		adapter = null;
		super.onDestroyView();
	}

	/**从数据库删除信息*/
	private void deleteinfo(String whereClause) {
		dbHelper.delete("ETGgeneralInfo", whereClause, null);
	}
}
